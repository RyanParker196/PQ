Process *process;
    int numProcess;
    Event *event, *newEvent;
    PQueueNode *eventQueue;
    PQueueNode *processQueue;
    int i, lastTime;
    int currentTime, processMachineIsBusy;
    int totalWaitTime;
    int delta, waitTime;
    double d;


    eventQueue = NULL;
    processQueue = NULL;

    lastTime = 0;
    processMachineIsBusy = 0;
    totalWaitTime = 0;

    numProcess = NUM_PROCESS;

    for (i=1; i<=numProcess; ++i) {
        // create a process
        process = (Process *) malloc(sizeof(Process));
        process->pid = i;
        sprintf(process->name, "process-%d", i);
        process->lastTime = 0;

        // assign a burstTime for this event: random integer in the
        // range [5, 15)
        d = drand48();
        process->burstTime = 5 + (int) (10.0 * d);

        // assign a start time for this event: random integer in the range
        // [1, 10)
        d = drand48();
        delta = (int) 1 + (int) (9.0 * d);
        lastTime = lastTime + delta;

        // create an event for this process
        event = (Event *) malloc(sizeof(Event));
        event->eventType = PROCESS_SUBMITTED;
        event->process = process;
        enqueue(&eventQueue, lastTime, event);
    }

    printf("here is the event queue after creating %d processs\n", numProcess);
    printQueue(eventQueue, printEvent);
    printf("\n");

    currentTime = getMinPriority(eventQueue);
    event = dequeue(&eventQueue);
    while (event != NULL) {
        process = event->process;
        if (event->eventType == PROCESS_SUBMITTED) {
            process->lastTime = currentTime;
            if (processMachineIsBusy == 0) {
                // create an event at currentTime to start this process
                newEvent = (Event *) malloc(sizeof(Event));
                newEvent->eventType = PROCESS_STARTS;
                newEvent->process = process;
                enqueue(&eventQueue, currentTime, newEvent);
                processMachineIsBusy = 1;
            } else {
                // can't start: put this process in the process queue
                printf("t = %d: %s wants to start but must go into the processQueue\n", currentTime, process->name);
                enqueue(&processQueue, 0, process);
            }
        } else if (event->eventType == PROCESS_STARTS) {
//      printf("t = %d: %s starts\n", currentTime, process->name);
            waitTime = currentTime - process->lastTime;
            printf("t = %d: %s starts; wait time = %d\n",
                   currentTime, process->name, waitTime);
            totalWaitTime += waitTime;
            // create an event in the future for the termination of this process
            newEvent = (Event *) malloc(sizeof(Event));
            newEvent->eventType = PROCESS_ENDS;
            newEvent->process = process;
            enqueue(&eventQueue, currentTime + process->burstTime, newEvent);
        } else if (event->eventType == PROCESS_ENDS) {
            process = event->process;
            printf("t = %d: %s ends\n", currentTime, process->name);
            // see if there is a process in the processQueue
            if (queueLength(processQueue) > 0) {
                process = dequeue(&processQueue);
//      printf("t = %d: %s starts; wait time = %d\n",
//             currentTime, process->name, waitTime);
                // create an event in the future for the termination of this process
                newEvent = (Event *) malloc(sizeof(Event));
                newEvent->eventType = PROCESS_STARTS;
                newEvent->process = process;
                enqueue(&eventQueue, currentTime, newEvent);
            } else {
                // current process finished, so process machine is not busy
                processMachineIsBusy = 0;
            }
        }

        currentTime = getMinPriority(eventQueue);
        if (currentTime >= 0)
            printf("currentTime = %d\n", currentTime);
        printQueue(eventQueue, printEvent);
        printf("\n");

        event = dequeue(&eventQueue);
    }

    printf("\n");
    printf("%d processs; mean wait time = %.2f\n", numProcess,
           (double) totalWaitTime / numProcess);
    return(0);